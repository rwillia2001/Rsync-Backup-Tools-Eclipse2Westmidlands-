#!/usr/bin/env bash
set -euo pipefail

REQ_CODENAME="noble"       # 24.04 LTS
PIN_FILE="/etc/apt/preferences.d/99-security-only"
UUA_OVERRIDE="/etc/apt/apt.conf.d/52unattended-upgrades-security-only"
SYSTEMD_UNITS=(
  apt-daily.service
  apt-daily-upgrade.service
  apt-daily.timer
  apt-daily-upgrade.timer
)

say() { printf "\n\033[1m%s\033[0m\n" "$*"; }
die() { echo "Error: $*" >&2; exit 1; }

need_root() {
  [ "$(id -u)" -eq 0 ] || die "Please run as root (use sudo)."
}

check_release() {
  local codename
  codename="$(. /etc/os-release; echo "${VERSION_CODENAME:-}")"
  [ -n "$codename" ] || die "Cannot determine VERSION_CODENAME."
  if [[ "$codename" != "$REQ_CODENAME" ]]; then
    say "Warning: This system is '$codename', script tuned for '$REQ_CODENAME'. Continuing anyway."
  else
    say "Detected Ubuntu $codename."
  fi
}

backup_once() {
  local path="$1"
  if [[ -f "$path" && ! -f "$path.bak" ]]; then
    cp -a "$path" "$path.bak"
    echo "Backed up: $path -> $path.bak"
  fi
}

apply_pinning() {
  say "Applying APT pinning (allow security; block updates/backports/proposed)..."
  mkdir -p /etc/apt/preferences.d
  backup_once "$PIN_FILE"
  cat > "$PIN_FILE" <<'EOF'
Package: *
Pin: release a=noble-security
Pin-Priority: 500

# Allow Ubuntu Pro ESM security (if attached). Harmless if not attached.
Package: *
Pin: release a=noble-infra-security
Pin-Priority: 500

Package: *
Pin: release a=noble-apps-security
Pin-Priority: 500

# Block non-security pockets
Package: *
Pin: release a=noble-updates
Pin-Priority: -1

Package: *
Pin: release a=noble-backports
Pin-Priority: -1

Package: *
Pin: release a=noble-proposed
Pin-Priority: -1
EOF
  echo "Wrote $PIN_FILE"
}

apply_unattended_override() {
  say "Restricting unattended-upgrades to security origins only..."
  backup_once "$UUA_OVERRIDE"
  cat > "$UUA_OVERRIDE" <<'EOF'
// Generated by security_only_updates.sh
Unattended-Upgrade::Allowed-Origins {
  "Ubuntu:noble-security";
  "UbuntuESM:noble-infra-security";
  "UbuntuESMApps:noble-apps-security";
};

// Do NOT automatically reboot
Unattended-Upgrade::Automatic-Reboot "false";

// Be quiet unless there are errors
Unattended-Upgrade::MinimalSteps "true";
Unattended-Upgrade::Verbose "false";
EOF
  echo "Wrote $UUA_OVERRIDE"
}

disable_apt_timers() {
  say "Disabling apt-daily timers/services..."
  for unit in "${SYSTEMD_UNITS[@]}"; do
    systemctl disable --now "$unit" >/dev/null 2>&1 || true
  done
}

enable_apt_timers() {
  say "Re-enabling apt-daily timers/services..."
  for unit in "${SYSTEMD_UNITS[@]}"; do
    systemctl enable --now "$unit" >/dev/null 2>&1 || true
  done
}

apt_refresh() {
  say "Refreshing APT metadata..."
  apt-get update -y
}

show_status() {
  say "APT policy (showing pockets):"
  apt-cache policy | sed -n '1,200p'

  say "Pinned preferences ($PIN_FILE):"
  if [[ -f "$PIN_FILE" ]]; then
    sed -n '1,200p' "$PIN_FILE"
  else
    echo "No pin file present."
  fi

  say "Unattended-upgrades override ($UUA_OVERRIDE):"
  if [[ -f "$UUA_OVERRIDE" ]]; then
    sed -n '1,200p' "$UUA_OVERRIDE"
  else
    echo "No override present."
  fi

  say "Systemd apt timers/services state:"
  systemctl list-timers | grep -E 'apt-daily|apt-daily-upgrade' || echo "No apt timers scheduled."
  for unit in "${SYSTEMD_UNITS[@]}"; do
    echo
    systemctl is-enabled "$unit" 2>/dev/null || true
    systemctl is-active "$unit" 2>/dev/null || true
  done

  say "Unattended-upgrades log tail:"
  test -f /var/log/unattended-upgrades/unattended-upgrades.log && tail -n 20 /var/log/unattended-upgrades/unattended-upgrades.log || echo "No log yet."
}

apply_all() {
  need_root
  check_release
  apply_pinning
  apply_unattended_override
  disable_apt_timers
  apt_refresh

  say "Dry-run security-only upgrade (for visibility):"
  unattended-upgrade --dry-run --debug || true

  say "Done. Your system is now set for security-only updates."
  echo "Use '--status' to verify."
}

revert_all() {
  need_root
  say "Reverting security-only configuration..."

  if [[ -f "$PIN_FILE.bak" ]]; then
    mv -f "$PIN_FILE.bak" "$PIN_FILE"
    echo "Restored backup: $PIN_FILE.bak -> $PIN_FILE"
  else
    rm -f "$PIN_FILE"
    echo "Removed $PIN_FILE"
  fi

  if [[ -f "$UUA_OVERRIDE.bak" ]]; then
    mv -f "$UUA_OVERRIDE.bak" "$UUA_OVERRIDE"
    echo "Restored backup: $UUA_OVERRIDE.bak -> $UUA_OVERRIDE"
  else
    rm -f "$UUA_OVERRIDE"
    echo "Removed $UUA_OVERRIDE"
  fi

  enable_apt_timers
  apt_refresh
  say "Reverted to default behavior."
}

usage() {
  cat <<EOF
Usage: sudo $0 [--apply|--status|--revert]

  --apply   Configure security-only updates (safe, reversible)
  --status  Show current config, pins, timers, and recent logs
  --revert  Restore defaults (remove pins/overrides, re-enable timers)
EOF
}

main() {
  case "${1:-}" in
    --apply)  apply_all ;;
    --status) show_status ;;
    --revert) revert_all ;;
    *) usage; exit 1 ;;
  esac
}

main "$@"
